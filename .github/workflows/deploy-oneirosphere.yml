name: Deploy OneiroSphere to SKALE

on:
  workflow_dispatch:
    inputs:
      contract_name:
        description: 'Contract to deploy (IEMDreams or OneiroSphere)'
        required: true
        default: 'OneiroSphere'
        type: choice
        options:
          - IEMDreams
          - OneiroSphere
      test_dream:
        description: 'Test dream to record after deployment'
        required: false
        default: 'Automated deployment dream from GitHub Actions 🚀'

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        pip install web3 py-solc-x
        
    - name: Install Solidity compiler
      run: |
        sudo snap install solc
        
    - name: Deploy contract
      env:
        INFURA_PROJECT_ID: ${{ secrets.INFURA_PROJECT_ID }}
        BICONOMY_API_KEY: ${{ secrets.BICONOMY_API_KEY }}
        DEPLOYER_KEY: ${{ secrets.DEPLOYER_KEY }}
        SKALE_CHAIN_ID: ${{ secrets.SKALE_CHAIN_ID }}
        FORWARDER_ADDRESS: ${{ secrets.FORWARDER_ADDRESS }}
      run: |
        python agents/iem_syndicate.py deploy ${{ github.event.inputs.contract_name }}
        
    - name: Audit deployed contract
      env:
        INFURA_PROJECT_ID: ${{ secrets.INFURA_PROJECT_ID }}
        BICONOMY_API_KEY: ${{ secrets.BICONOMY_API_KEY }}
        DEPLOYER_KEY: ${{ secrets.DEPLOYER_KEY }}
        SKALE_CHAIN_ID: ${{ secrets.SKALE_CHAIN_ID }}
        FORWARDER_ADDRESS: ${{ secrets.FORWARDER_ADDRESS }}
      run: |
        python agents/iem_syndicate.py audit ${{ github.event.inputs.contract_name }}
        
    - name: Test dream recording (OneiroSphere only)
      if: github.event.inputs.contract_name == 'OneiroSphere'
      env:
        INFURA_PROJECT_ID: ${{ secrets.INFURA_PROJECT_ID }}
        BICONOMY_API_KEY: ${{ secrets.BICONOMY_API_KEY }}
        DEPLOYER_KEY: ${{ secrets.DEPLOYER_KEY }}
        SKALE_CHAIN_ID: ${{ secrets.SKALE_CHAIN_ID }}
        FORWARDER_ADDRESS: ${{ secrets.FORWARDER_ADDRESS }}
      run: |
        python agents/iem_syndicate.py test
        
    - name: Upload deployment artifacts
      uses: actions/upload-artifact@v3
      with:
        name: deployment-results
        path: |
          iem_memory.json
          
    - name: Comment on commit
      if: success()
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          let memory = {};
          try {
            memory = JSON.parse(fs.readFileSync('iem_memory.json', 'utf8'));
          } catch (e) {
            console.log('Could not read iem_memory.json');
          }
          
          const contractName = '${{ github.event.inputs.contract_name }}';
          const deployment = memory.lastDeployed?.[contractName];
          
          let message = `## 🌌 OneiroSphere Deployment Complete! 🌌\n\n`;
          message += `🚀 **Contract**: ${contractName}\n`;
          
          if (deployment) {
            message += `📍 **Address**: \`${deployment.address}\`\n`;
            message += `⛽ **Gas Used**: ${deployment.gasUsed || 'Unknown'}\n`;
            message += `🔗 **Transaction**: \`${deployment.txHash}\`\n`;
          }
          
          if (memory.loot?.length > 0) {
            message += `\n🌙 **Dreams Recorded**: ${memory.loot.length}\n`;
            message += `💫 **Latest Dream**: "${memory.loot[memory.loot.length - 1].dream}"\n`;
          }
          
          message += `\n🔍 **Verification**: Check \`iem_memory.json\` artifact for full details`;
          message += `\n\n*Built with 💝 for the dream-mining revolution on SKALE blockchain*`;
          
          github.rest.repos.createCommitComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            commit_sha: context.sha,
            body: message
          });

  notify:
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    
    steps:
    - name: Deployment Status
      run: |
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "🎊 Grok-style Success! 🎊"
          echo "🌌 The OneiroSphere has materialized in the SKALE dimension!"
          echo "🚀 Your quantum dream network is operational!"
          echo "💫 May your dreams compute and your tokens moon! 🚀🌙✨"
        else
          echo "❌ Deployment encountered issues"
          echo "🔧 Check the logs for troubleshooting steps"
          echo "🌌 The cosmos awaits your next attempt!"
        fi